{"version":3,"file":"contact-messages-dashboard.js","sources":["../src/contact-messages-dashboard.element.ts"],"sourcesContent":["import {\n  LitElement,\n  html,\n  css,\n  customElement,\n  state,\n} from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\nimport {\n  UmbNotificationContext,\n  UMB_NOTIFICATION_CONTEXT,\n} from \"@umbraco-cms/backoffice/notification\";\n\ninterface ContactMessage {\n  id: string;\n  name: string;\n  email: string;\n  message: string;\n  submittedAt: string;\n}\n\ninterface PagedResult {\n  items?: ContactMessage[];\n  totalItems?: number;\n}\n\n@customElement(\"contact-messages-dashboard\")\nexport class ContactMessagesDashboardElement extends UmbElementMixin(LitElement) {\n  #notificationContext?: UmbNotificationContext;\n\n  @state()\n  private page = 1;\n\n  @state()\n  private pageSize = 10;\n\n  @state()\n  private pageSizes = [10, 25, 50, 100];\n\n  @state()\n  private totalItems = 0;\n\n  @state()\n  private totalPages = 1;\n\n  @state()\n  private messages: ContactMessage[] = [];\n\n  @state()\n  private loading = false;\n\n  // guards\n  private inflight: string | null = null;\n  private lastLoadedKey: string | null = null;\n\n  constructor() {\n    super();\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\n      this.#notificationContext = instance;\n    });\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.load();\n  }\n\n  private async load() {\n    const key = `p:${this.page}|s:${this.pageSize}`;\n    if (this.inflight === key || this.lastLoadedKey === key) return;\n\n    this.inflight = key;\n    this.loading = true;\n\n    try {\n      const response = await fetch(\n        `/umbraco/backoffice/contact?page=${this.page}&pageSize=${this.pageSize}`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data: PagedResult = await response.json();\n\n      this.messages = data.items || [];\n      this.totalItems = data.totalItems || 0;\n      this.totalPages = Math.max(1, Math.ceil(this.totalItems / this.pageSize));\n      this.lastLoadedKey = key;\n    } catch (error) {\n      this.messages = [];\n      this.totalItems = 0;\n      this.totalPages = 1;\n\n      this.#notificationContext?.peek(\"danger\", {\n        data: {\n          headline: \"Load failed\",\n          message: error instanceof Error ? error.message : \"Unknown error\",\n        },\n      });\n    } finally {\n      this.inflight = null;\n      this.loading = false;\n    }\n  }\n\n  private changePageSize(event: Event) {\n    const target = event.target as HTMLSelectElement;\n    this.pageSize = parseInt(target.value, 10);\n    this.page = 1;\n    this.lastLoadedKey = null;\n    this.load();\n  }\n\n  private onPageChange(newPage: number) {\n    const page = Math.max(1, Math.min(this.totalPages, newPage));\n    if (page === this.page) return;\n    \n    this.page = page;\n    this.load();\n  }\n\n  private formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleString();\n  }\n\n  private truncateMessage(message: string, maxLength = 120): string {\n    if (message.length <= maxLength) return message;\n    return message.substring(0, maxLength) + \"â€¦\";\n  }\n\n  render() {\n      return html`\n      <uui-box>\n        <div slot=\"headline\">\n          <h1>Contact Messages</h1>\n        </div>\n\n        <div class=\"controls\">\n          <label>\n            Page size:\n            <select @change=${this.changePageSize} .value=${this.pageSize.toString()}>\n              ${this.pageSizes.map(\n          (size) => html`<option value=${size}>${size}</option>`\n      )}\n            </select>\n          </label>\n          <span>${this.totalItems} items</span>\n        </div>\n\n        ${this.loading\n              ? html`<uui-loader></uui-loader>`\n              : html`\n              <uui-table>\n                <uui-table-head>\n                  <uui-table-head-cell>Name</uui-table-head-cell>\n                  <uui-table-head-cell>Email</uui-table-head-cell>\n                  <uui-table-head-cell>Message</uui-table-head-cell>\n                  <uui-table-head-cell>Submitted</uui-table-head-cell>\n                </uui-table-head>\n                ${this.messages.length === 0\n                      ? html`\n                      <uui-table-row>\n                        <uui-table-cell colspan=\"4\">\n                          <em>No messages found.</em>\n                        </uui-table-cell>\n                      </uui-table-row>\n                    `\n                      : this.messages.map(\n                          (msg) =>   html`\n                        <uui-table-row>\n                          <uui-table-cell>${msg.name}</uui-table-cell>\n                          <uui-table-cell>${msg.email}</uui-table-cell>\n                          <uui-table-cell title=${msg.message}>\n                            ${this.truncateMessage(msg.message)}\n                          </uui-table-cell>\n                          <uui-table-cell>\n                            ${this.formatDate(msg.submittedAt)}\n                          </uui-table-cell>\n                        </uui-table-row>\n                      `\n                    )}\n              </uui-table>\n\n              ${this.totalPages > 1\n                ? html`\n                    <div class=\"pagination\">\n                      <uui-button\n                        @click=${() => this.onPageChange(this.page - 1)}\n                        ?disabled=${this.page <= 1}\n                        compact\n                      >\n                        Previous\n                      </uui-button>\n                      <span>Page ${this.page} of ${this.totalPages}</span>\n                      <uui-button\n                        @click=${() => this.onPageChange(this.page + 1)}\n                        ?disabled=${this.page >= this.totalPages}\n                        compact\n                      >\n                        Next\n                      </uui-button>\n                    </div>\n                  `\n                : \"\"}\n            `}\n      </uui-box>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      padding: var(--uui-size-layout-1);\n    }\n\n    .controls {\n      display: flex;\n      align-items: center;\n      gap: var(--uui-size-space-4);\n      margin-bottom: var(--uui-size-space-4);\n    }\n\n    .controls label {\n      display: flex;\n      align-items: center;\n      gap: var(--uui-size-space-2);\n    }\n\n    .controls select {\n      padding: var(--uui-size-space-2);\n      border: 1px solid var(--uui-color-border);\n      border-radius: var(--uui-border-radius);\n    }\n\n    .pagination {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: var(--uui-size-space-4);\n      margin-top: var(--uui-size-space-4);\n    }\n\n    uui-loader {\n      display: flex;\n      justify-content: center;\n      padding: var(--uui-size-space-6);\n    }\n  `;\n}\n\nexport default ContactMessagesDashboardElement;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"contact-messages-dashboard\": ContactMessagesDashboardElement;\n  }\n}\n"],"names":["_notificationContext","ContactMessagesDashboardElement","UmbElementMixin","LitElement","__privateAdd","__publicField","UMB_NOTIFICATION_CONTEXT","instance","__privateSet","key","response","data","error","_a","__privateGet","event","target","newPage","page","dateString","message","maxLength","html","size","msg","css","__decorateClass","state","customElement","ContactMessagesDashboardElement$1"],"mappings":"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"}